#ifdef GL_ES
precision mediump float;
#endif

uniform float time;
uniform vec2 resolution;

// 2D noise function (classic value noise)
float hash(vec2 p) {
    return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453123);
}
float noise(vec2 p) {
    vec2 i = floor(p);
    vec2 f = fract(p);
    vec2 u = f*f*(3.0-2.0*f);
    
    return mix(mix(hash(i + vec2(0.0, 0.0)), 
                   hash(i + vec2(1.0, 0.0)), u.x),
               mix(hash(i + vec2(0.0, 1.0)), 
                   hash(i + vec2(1.0, 1.0)), u.x), u.y);
}

float fbm(vec2 p) {
    float value = 0.0;
    float amplitude = 0.5;
    for (int i = 0; i < 5; ++i) {
        value += amplitude * noise(p);
        p *= 2.0;
        amplitude *= 0.5;
    }
    return value;
}

void main() {
    vec2 uv = (gl_FragCoord.xy - 0.5 * resolution.xy) / resolution.y;
    float r = length(uv);

    // Animate surface with time-varying fbm
    float turbulence = fbm(uv * 4.0 + vec2(time * 0.2, time * 0.1));

    // Sun surface brightness
    float sun = smoothstep(0.5, 0.2, r) + 0.3 * turbulence;

    // Corona glow
    float glow = exp(-4.0 * r) + 0.2 * fbm(uv * 2.0 - time * 0.1);

    // Color blending (hot plasma effect)
    vec3 coreColor = vec3(1.0, 0.6, 0.1);      // deep orange
    vec3 outerColor = vec3(1.0, 0.9, 0.3);     // bright yellow
    vec3 color = mix(coreColor, outerColor, turbulence);

    // Final color
    color *= sun;
    color += glow * vec3(1.0, 0.5, 0.1); // corona glow color

    gl_FragColor = vec4(color, 1.0);
}
